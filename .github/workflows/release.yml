# Copyright 2024 the Operaton contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: Release

on:
  workflow_dispatch:
    inputs:
      next_version:
        description: 'The next development version to set (without -SNAPSHOT suffix)'
        required: true
        default: '1.2.0'
      dry_run:
        description: 'Dry-Run: Skips remote operations when true'
        type: boolean
        required: true
        default: false
jobs:

  release_build:
    name: Release Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{steps.version.outputs.version}}
      database_version: ${{steps.version.outputs.database_version}}
      is_prerelease: ${{steps.version.outputs.is_prerelease}}
    steps:
      - name: Check out the code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Version
        id: version
        shell: bash
        run: |
          RELEASE_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout | tail -n 1 | sed -e 's/-SNAPSHOT//')
          echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          DATABASE_VERSION=$(grep '<operaton.dbscheme.current.version>' database/pom.xml | sed -e 's/.*<operaton.dbscheme.current.version>\(.*\)<\/operaton.dbscheme.current.version>.*/\1/')
          echo "database_version=$DATABASE_VERSION" >> $GITHUB_OUTPUT
          echo "database_version=$DATABASE_VERSION"
          if [[ "$RELEASE_VERSION" == *"alpha"* || "$RELEASE_VERSION" == *"beta"* ]]; then
            echo "⚙ Releasing version '$RELEASE_VERSION' (Pre-Release)"
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "⚙ Releasing version '$RELEASE_VERSION'"
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi
          .github/scripts/set-project-version.sh $RELEASE_VERSION

      - name: Maven Build
        run: |
          PROJECT_ROOT=$(pwd)
          # Make a verification build. Also the deploy step will need the tomcat distro for building, but we don't want to deploy it.
          ./mvnw \
            -Pdistro,distro-run,distro-tomcat,distro-wildfly,distro-webjar,distro-starter,distro-serverless,h2-in-memory \
            install \
            versions:dependency-updates-aggregate-report \
            versions:plugin-updates-aggregate-report \
            -Dsave=true -Ddisplay=false io.github.orhankupusoglu:sloc-maven-plugin:sloc \
            -Dbuildplan.appendOutput=true -Dbuildplan.outputFile=$PROJECT_ROOT/target/reports/buildplan.txt fr.jcgay.maven.plugins:buildplan-maven-plugin:list
          .github/scripts/prepare-reports.sh
          ./mvnw -Psonatype-oss-release -DskipTests=true -Dskip.frontend.build=true deploy
          find target -name maven-metadata.* -delete
      - name: Documentation
        if: always()
        run: |
          .devenv/scripts/build/javadoc.sh
          .devenv/scripts/build/check-api-compatibility.sh
          .devenv/scripts/build/rest-api-doc.sh
          .devenv/scripts/build/build-sbom.sh
          pip install pystache
          distro/license-book/src/main/python/license-book-generator.py
      - name: Commit changes
        uses: EndBug/add-and-commit@a94899bca583c204427a224a7af87c02f9b325d5 # v9.1.4
        if: ${{github.event.inputs.dry_run == 'false' }}
        with:
          message: "chore(release) Releasing version ${{steps.version.outputs.version}}"
      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            distro/**/*.tar.gz
            distro/**/*.zip
            distro/webjar/target/operaton-webapp-webjar-*.jar
            ./*/staging-deploy/**
            **/target/reports/**
            **/target/surefire-reports/*.xml
            target/sbom/**
            target/*.zip
            distro/license-book/src/main/resources/license-book.md
          key: ${{ github.run_id }}-build-artifacts

  release:
    name: Release
    needs:
      - release_build
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Restore build artifacts cache
        uses: actions/cache@v4
        with:
          path: |
            distro/**/*.tar.gz
            distro/**/*.zip
            distro/webjar/target/operaton-webapp-webjar-*.jar
            ./*/staging-deploy/**
            **/target/reports/**
            **/target/surefire-reports/*.xml
            target/sbom/**
            target/*.zip
            distro/license-book/src/main/resources/license-book.md
          key: ${{ github.run_id }}-build-artifacts
          fail-on-cache-miss: true

      - name: Release with JReleaser
        uses: jreleaser/release-action@v2
        env:
          JRELEASER_PROJECT_VERSION: ${{needs.release_build.outputs.version}}
          JRELEASER_GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          JRELEASER_GPG_PUBLIC_KEY: ${{secrets.GPG_PUBLIC_KEY}}
          JRELEASER_GPG_SECRET_KEY: ${{secrets.GPG_PRIVATE_KEY}}
          JRELEASER_GPG_PASSPHRASE: ${{secrets.GPG_PASSPHRASE}}
          JRELEASER_MAVENCENTRAL_USERNAME: ${{secrets.OSSRH_USERNAME}}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{secrets.OSSRH_PASSWORD}}
          JRELEASER_DRY_RUN: ${{github.event.inputs.dry_run}}
          JRELEASER_PRERELEASE_ENABLED: false
        with:
          arguments: full-release -POPERATON_DATABASE_VERSION=${{needs.release_build.outputs.database_version}}

      - name: Publish Test Report
        if: always()
        uses: mikepenz/action-junit-report@5b7ee5a21e8674b695313d769f3cbdfd5d4d53a4 #v6.0.0
        with:
          report_paths: ${{ github.workspace }}/**/target/surefire-reports/*.xml
          require_passed_tests: true

      - name: Archive Reports
        uses: actions/upload-artifact@v5
        with:
          name: reports
          path: |
            **/target/reports/**

      - name: Archive Staging Repo
        uses: actions/upload-artifact@v5
        with:
          name: staging
          path: |
            ./*/staging-deploy/**
          retention-days: 10

  post_release:
    name: Post-Release
    needs:
      - release
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set next development version
        id: set-next-version
        run: |
          NEXT_VERSION=${{github.event.inputs.next_version}}-SNAPSHOT
          .github/scripts/set-project-version.sh $NEXT_VERSION
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Commit changes
        uses: EndBug/add-and-commit@a94899bca583c204427a224a7af87c02f9b325d5 # v9.1.4
        if: ${{github.event.inputs.dry_run == 'false' }}
        with:
          message: "[releng] Bump version to ${{steps.set-next-version.outputs.next_version}}"

      - name: Notify Docker Repository
        if: ${{github.event.inputs.dry_run == 'false' }}
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
            -H "Authorization: Bearer ${{ secrets.DOCKER_ACTION_DISPATCH_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -d '{"ref":"main","inputs":{"version": "${{ needs.release_build.outputs.version}}","snapshot": "false"}}' \
            https://api.github.com/repos/operaton/operaton-docker/actions/workflows/build-test-and-publish.yml/dispatches)
          if [ "$response" -ne 204 ]; then
            echo "Failed to notify Docker repository. HTTP response code: $response"
            exit 1
          fi
