name: Integration Build

on:
  schedule:
    - cron: "0 2 * * *"     # Runs at 2:00 AM UTC daily
  pull_request:
    branches:
      - main
      - release/*
  push:
    branches:
      - release/*
      # when developing the workflow itself, create this branch and push to it
      - ci-dev/integration-build
  workflow_dispatch:        # Allows manual trigger
    inputs:
      java_version:
        description: 'Java version to use'
        type: choice
        required: true
        default: '["17"]'
        options:
          - '["17"]'
          - '["21"]'
          - '["25"]'
          - '["17", "21"]'
          - '["17", "25"]'
          - '["21", "25"]'
          - '["17", "21", "25"]'
      distro:
        description: 'Integration Tests: Distribution to use'
        type: choice
        required: true
        default: '["operaton", "tomcat", "wildfly"]'
        options:
          - '["operaton"]'
          - '["tomcat"]'
          - '["wildfly"]'
          - '["operaton", "tomcat", "wildfly"]'
      testsuite:
        description: 'Integration Tests: Test suite to run'
        type: choice
        required: true
        default: '["engine", "webapps"]'
        options:
          - '["engine"]'
          - '["webapps"]'
          - '["engine", "webapps"]'
      database:
        description: 'Integration Tests: Database to use'
        type: choice
        required: true
        default: '["h2"]'
        options:
          - '["h2"]'
          - '["postgresql"]'
          - '["postgresql-xa"]'
          - '["mariadb"]'
          - '["sqlserver"]'
          - '["mysql"]'
          - '["oracle"]'
          - '["db2"]'
          - '["h2", "postgresql"]'
          - '["h2", "postgresql", "mariadb", "mysql", "oracle", "db2"]'
      perform_documentation:
        description: 'Build documentation (javadoc, rest-api, clirr, sbom)'
        type: boolean
        required: true
        default: false
      perform_release:
        description: 'Perform release actions (simulate scheduled release builds)'
        type: boolean
        required: true
        default: false
      dry_run:
        description: 'Dry run: Skip remote operations (e.g. Maven Central, Docker)'
        type: boolean
        required: true
        default: true

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  determine-build-config:
    name: Determine Build Configuration
    runs-on: ubuntu-latest
    outputs:
      needs_build:              ${{ steps.check-pr.outputs.needs_build }}
      needs_integration_build:  ${{ steps.check-pr.outputs.needs_integration_build }}
      needs_documentation:      ${{ steps.check-pr.outputs.needs_documentation }}
      needs_release:            ${{ steps.check-pr.outputs.needs_release }}
      recent_changes:           ${{ steps.check-pr.outputs.recent_changes }}
      dry_run:                  ${{ steps.check-pr.outputs.dry_run }}
      java_versions:            ${{ steps.compute-matrix.outputs.java_versions }}
      distros:                  ${{ steps.compute-matrix.outputs.distros }}
      databases:                ${{ steps.compute-matrix.outputs.databases }}
      test_suites:              ${{ steps.compute-matrix.outputs.test_suites }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Check PR conditions
        id: check-pr
        env:
          PR_LABELS:                    ${{ toJson(github.event.pull_request.labels.*.name) }}
          PR_AUTHOR:                    ${{ github.event.pull_request.user.login }}
          EVENT_NAME:                   ${{ github.event_name }}
        run: |
          NEEDS_BUILD=false
          NEEDS_INTEGRATION_BUILD=true
          NEEDS_DOCUMENTATION=${{ github.event.inputs.perform_documentation }}
          NEEDS_RELEASE=${{ github.event.inputs.perform_release }}
          DRY_RUN=${{ github.event.inputs.dry_run }}
          HAS_RECENT_CHANGES=false
          
          COMMITS=$(git rev-list --since="24 hours ago" HEAD)
          if [ -z "$COMMITS" ]; then
            echo "🔎❌ No commits in the last 24 hours detected."
          else
            echo "🔎✔️ Commits within the last 24 hours detected."
            HAS_RECENT_CHANGES=true
          fi

          # Define whitelisted authors (core team members who don't need full integration tests)
          WHITELISTED_AUTHORS="kthoms,javahippie"
          
          if [[ "$EVENT_NAME" == "schedule" && -z "$COMMITS" ]]; then
            echo "⏰ Scheduled run, requiring integration build"
            NEEDS_BUILD=true
            NEEDS_DOCUMENTATION=true
            NEEDS_RELEASE=true
            DRY_RUN=false
            SKIP_TESTS=false
          elif [[ "$EVENT_NAME" == "pull_request" || "$EVENT_NAME" == "push" ]]; then
            echo "🔀 Pull request event, evaluating conditions"            

            echo "PR Labels: $PR_LABELS"
            echo "PR Author: $PR_AUTHOR"

            # Check if author is whitelisted
            if echo "$WHITELISTED_AUTHORS" | grep -q "$PR_AUTHOR"; then
              echo "ℹ️ PR author $PR_AUTHOR is whitelisted"
              AUTHOR_WHITELISTED=true
            else
              echo "ℹ️ PR author $PR_AUTHOR is NOT whitelisted"
              AUTHOR_WHITELISTED=false
            fi

            # Check if PR has dependency label
            if echo "$PR_LABELS" | grep -q '"dependencies"'; then
              echo "📦 PR has dependencies label"
            # Check if PR has distro: labels
            elif echo "$PR_LABELS" | grep -q '"distro:'; then
              echo "🏗️ PR has distro labels"
            # Check if PR has database: labels
            elif echo "$PR_LABELS" | grep -q '"database:'; then
              echo "🗄️ PR has database labels"
            # Check if PR is from Dependabot
            elif [[ "$PR_AUTHOR" == "dependabot"* ]]; then
              echo "🤖 PR is from Dependabot"
            # Check if author is not whitelisted
            elif [[ "$AUTHOR_WHITELISTED" == "false" ]]; then
              echo "👤 PR author is not whitelisted, requiring integration build"
            else
              NEEDS_INTEGRATION_BUILD=false
            fi
          else
            echo "ℹ️ Event type $EVENT_NAME requires an integration build by default"
            NEEDS_INTEGRATION_BUILD=true
          fi
          
          if [[ "$NEEDS_INTEGRATION_BUILD" == "false" ]]; then
            echo "⚠️ Integration build not required"
          fi
          
          echo "needs_build=$NEEDS_BUILD" >> $GITHUB_OUTPUT
          echo "needs_integration_build=$NEEDS_INTEGRATION_BUILD" >> $GITHUB_OUTPUT
          echo "needs_documentation=$NEEDS_DOCUMENTATION" >> $GITHUB_OUTPUT
          echo "needs_release=$NEEDS_RELEASE" >> $GITHUB_OUTPUT
          echo "recent_changes=$HAS_RECENT_CHANGES" >> $GITHUB_OUTPUT
          echo "dry_run=$DRY_RUN" >> $GITHUB_OUTPUT

      - name: Debug Outputs
        run: |
          echo "🛠️ Build Configuration:"
          echo "  Needs Build:               ${{ steps.check-pr.outputs.needs_build }}"
          echo "  Needs Integration Build:   ${{ steps.check-pr.outputs.needs_integration_build }}"
          echo "  Needs Documentation:       ${{ steps.check-pr.outputs.needs_documentation }}"
          echo "  Needs Release:             ${{ steps.check-pr.outputs.needs_release }}"
          echo "  Recent Changes:            ${{ steps.check-pr.outputs.recent_changes }}"
          echo "  Dry Run:                   ${{ steps.check-pr.outputs.dry_run }}"

      - name: Compute matrix values
        id: compute-matrix
        if: steps.check-pr.outputs.needs_integration_build == 'true'
        env:
          PR_LABELS:          ${{ toJson(github.event.pull_request.labels.*.name) }}
          EVENT_NAME:         ${{ github.event_name }}
        run: |
          # Java version is always 17 for PR builds
          JAVA_VERSIONS='["17", "21", "25"]'
          if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
            JAVA_VERSIONS=${{ github.event.inputs.java_version }}
          elif [[ "$EVENT_NAME" == "pull_request" || "$EVENT_NAME" == "push" ]]; then
            JAVA_VERSIONS=(17)
            echo "🎯 Using Java version 17 for PR/Push builds"
          else
            echo "🎯 Using Java versions from input: $JAVA_VERSIONS"
          fi
          echo "java_versions=$JAVA_VERSIONS" >> $GITHUB_OUTPUT
          
          DISTROS='["operaton", "tomcat", "wildfly"]'
          # Determine distros based on labels
          DISTRO_LABELS=$(echo "$PR_LABELS" | jq -r '.[] | select(startswith("distro:")) | sub("distro:"; "")')
          if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
            DISTROS= ${{ github.event.inputs.distro_operaton }}
          elif [[ -n "$DISTRO_LABELS" ]]; then
            # Convert to JSON array
            DISTROS=$(echo "$DISTRO_LABELS" | jq -R -s 'split("\n") | map(select(. != ""))')
            echo "🎯 Using specific distros from labels: $DISTROS"
          else
            echo "🎯 Using distros: $DISTROS"
          fi
          echo "distros=$DISTROS" >> $GITHUB_OUTPUT
          
          DATABASES='["h2", "postgresql", "mariadb", "mysql", "oracle", "db2"]'
          # Determine databases based on labels
          DATABASE_LABELS=$(echo "$PR_LABELS" | jq -r '.[] | select(startswith("database:")) | sub("database:"; "")')
          if [[ -n "$DATABASE_LABELS" ]]; then
            # Convert to JSON array
            DATABASES=$(echo "$DATABASE_LABELS" | jq -R -s 'split("\n") | map(select(. != ""))')
            echo "🎯 Using specific databases from labels: $DATABASES"
          elif [[ "$EVENT_NAME" == "pull_request" || "$EVENT_NAME" == "push" ]]; then
            DATABASES='["h2"]'
            echo "🎯 Using H2 database for PR/Push builds"
          elif [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
            DATABASES=${{ github.event.inputs.database }}
          fi
          echo "databases=$DATABASES" >> $GITHUB_OUTPUT
          
          TEST_SUITES='["engine", "webapps"]'
          if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
            TEST_SUITES=${{ github.event.inputs.testsuite_engine }}
            if [[ -z "$TEST_SUITES" ]]; then
              echo "⚠️ No test suites selected, skipping integration build"
              echo "needs_integration_build=false" >> $GITHUB_OUTPUT
            fi
          fi
          echo "test_suites=$TEST_SUITES" >> $GITHUB_OUTPUT


      - name: Debug Outputs
        run: |
          echo "🛠️ Build Configuration:"
          echo "  Needs Build:               ${{ steps.check-pr.outputs.needs_build }}"
          echo "  Needs Integration Build:   ${{ steps.check-pr.outputs.needs_integration_build }}"
          echo "  Needs Documentation:       ${{ steps.check-pr.outputs.needs_documentation }}"
          echo "  Needs Release:             ${{ steps.check-pr.outputs.needs_release }}"
          echo "  Recent Changes:            ${{ steps.check-pr.outputs.recent_changes }}"
          echo "  Dry Run:                   ${{ steps.check-pr.outputs.dry_run }}"
          echo "  Java Versions:             ${{ steps.compute-matrix.outputs.java_versions }}"
          echo "  Distros:                   ${{ steps.compute-matrix.outputs.distros }}"
          echo "  Databases:                 ${{ steps.compute-matrix.outputs.databases }}"
          echo "  Test Suites:               ${{ steps.compute-matrix.outputs.test_suites }}"

      - name: Early Exit Check
        if: steps.check-pr.outputs.needs_integration_build == 'false'
        run: |
          echo "🚫 Integration build not needed for this run"
          echo "Workflow will be cancelled gracefully"
          exit 0

  build:
    name: Build
    strategy:
      fail-fast: true
      matrix:
        java: ${{ needs.determine-build-config.outputs.java_versions }}
    runs-on: ubuntu-latest
    needs: 
      - determine-build-config
    if: |
      always() && !cancelled() && (needs.determine-build-config.outputs.needs_build == 'true')
    outputs:
      version:          ${{steps.maven-build.outputs.version}}
      project_version:  ${{steps.maven-build.outputs.project_version}}
      database_version: ${{steps.maven-build.outputs.database_version}}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: "${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}"
          restore-keys: ${{ runner.os }}-m2
      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - name: Maven Build
        id: maven-build
        shell: bash
        run: |
          .github/scripts/jacoco-create-flag-files.sh
          PROJECT_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout | tail -n 1)
          RELEASE_VERSION=$(echo $PROJECT_VERSION | sed 's/-SNAPSHOT//')
          echo "project_version=$PROJECT_VERSION" >> $GITHUB_OUTPUT
          echo "project_version=$PROJECT_VERSION"
          echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "version=$RELEASE_VERSION"
          DATABASE_VERSION=$(grep '<operaton.dbscheme.current.version>' database/pom.xml | sed -e 's/.*<operaton.dbscheme.current.version>\(.*\)<\/operaton.dbscheme.current.version>.*/\1/')
          echo "database_version=$DATABASE_VERSION" >> $GITHUB_OUTPUT
          echo "database_version=$DATABASE_VERSION"
          
          CMD=".devenv/scripts/build/build.sh --profile=max --reports"
          $CMD

          .github/scripts/prepare-reports.sh
          ./mvnw -Psonatype-oss-release -DskipTests=true -Dskip.frontend.build=true deploy
          find target -name maven-metadata.* -delete
          ./mvnw --non-recursive org.jacoco:jacoco-maven-plugin:report-aggregate
      - name: Cache build artifacts
        uses: actions/cache/save@v4
        with:
          path: |
            distro/**/*.tar.gz
            distro/**/*.zip
            distro/webjar/target/operaton-webapp-webjar-*.jar
            ./*/staging-deploy/**
            **/target/reports/**
            **/target/surefire-reports/*.xml
            target/*.zip
          key: ${{ github.run_id }}-build-artifacts

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: 
      - determine-build-config
    if: |
      always() && !cancelled() && (needs.determine-build-config.outputs.needs_integration_build == 'true')
    strategy:
      fail-fast: false
      matrix:
        java:      ${{ needs.determine-build-config.outputs.java_versions  }}
        testsuite: ${{ needs.determine-build-config.outputs.test_suites }}
        distro:    ${{ needs.determine-build-config.outputs.distros }}
        database:  ${{ needs.determine-build-config.outputs.databases }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: "${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}"
          restore-keys: ${{ runner.os }}-m2
      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - name: Install Chromedriver
        id: install-chromedriver
        if: ${{ matrix.testsuite == 'webapps' }}
        shell: bash
        run: |
          .github/scripts/install-chrome-and-driver.sh
      - name: Maven Build
        id: maven-build
        shell: bash
        run: |
          .devenv/scripts/build/build-and-run-integration-tests.sh --testsuite=${{ matrix.testsuite }} --distro=${{ matrix.distro }} --db=${{ matrix.database }} --no-test
          .devenv/scripts/build/build-and-run-database-update-tests.sh --db=${{ matrix.database }} --no-test
      - name: Execute Integration Tests
        id: maven-integration-tests
        shell: bash
        run: |
          .devenv/scripts/build/build-and-run-integration-tests.sh --testsuite=${{ matrix.testsuite }} --distro=${{ matrix.distro }} --db=${{ matrix.database }} --no-build
      - name: Execute Database Upgrade Tests
        id: maven-db-upgrade-tests
        if: ${{ matrix.database == 'h2' }}
        shell: bash
        run: |
          .devenv/scripts/build/build-and-run-database-update-tests.sh --db=${{ matrix.database }} --no-build
      - name: Publish Test Report
        if: always()
        uses: mikepenz/action-junit-report@5b7ee5a21e8674b695313d769f3cbdfd5d4d53a4 #v6.0.0
        with:
          report_paths: ${{ github.workspace }}/**/target/*-reports/*.xml
          require_passed_tests: true
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: surefire-reports-${{ matrix.testsuite }}-${{ matrix.distro }}-${{ matrix.database }}
          path: |
            ${{ github.workspace }}/**/target/surefire-reports/**
            ${{ github.workspace }}/**/target/failsafe-reports/**
            ${{ github.workspace }}/qa/**/target/**/logs/**
            ${{ github.workspace }}/**/target/cargo.log
          retention-days: 30
          overwrite: true

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    needs:
      - determine-build-config
    if: |
      always() && !cancelled() && (needs.detect-recent-changes.outputs.needs_documentation == 'true')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Documentation
        run: |
          .devenv/scripts/build/javadoc.sh
          .devenv/scripts/build/check-api-compatibility.sh
          .devenv/scripts/build/rest-api-doc.sh
          .devenv/scripts/build/build-sbom.sh
      - name: Cache documentation artifacts
        uses: actions/cache/save@v4
        with:
          path: |
            target/*.zip
            target/sbom/**
          key: ${{ github.run_id }}-documentation-artifacts

  release:
    name: Release
    needs:
      - determine-build-config
      - build
      - integration-tests
      - documentation
    runs-on: ubuntu-latest
    if: |
      always() && !cancelled() && (needs.detect-recent-changes.outputs.needs_release == 'true')
    steps:
      - name: Check out the code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{github.event.inputs.release_branch}}

      - name: Restore build artifacts cache
        uses: actions/cache@v4
        with:
          path: |
            distro/**/*.tar.gz
            distro/**/*.zip
            distro/webjar/target/operaton-webapp-webjar-*.jar
            ./*/staging-deploy/**
            **/target/reports/**
            **/target/surefire-reports/*.xml
            target/*.zip
          key: ${{ github.run_id }}-build-artifacts
          fail-on-cache-miss: true

      - name: Restore documentation artifacts cache
        uses: actions/cache@v4
        with:
          path: |
            target/*.zip
            target/sbom/**
          key: ${{ github.run_id }}-documentation-artifacts
          fail-on-cache-miss: true

      - name: Release with JReleaser
        uses: jreleaser/release-action@v2
        env:
          JRELEASER_PROJECT_VERSION: ${{needs.build.outputs.project_version}}
          JRELEASER_GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          JRELEASER_GPG_PUBLIC_KEY: ${{secrets.GPG_PUBLIC_KEY}}
          JRELEASER_GPG_SECRET_KEY: ${{secrets.GPG_PRIVATE_KEY}}
          JRELEASER_GPG_PASSPHRASE: ${{secrets.GPG_PASSPHRASE}}
          JRELEASER_MAVENCENTRAL_USERNAME: ${{secrets.OSSRH_USERNAME}}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{secrets.OSSRH_PASSWORD}}
          JRELEASER_DRY_RUN: ${{ github.event_name == 'schedule' && false || github.event.inputs.dry_run }}
          JRELEASER_PRERELEASE_ENABLED: true
        with:
          arguments: full-release -POPERATON_DATABASE_VERSION=${{needs.build.outputs.database_version}}

      - name: Publish Test Report
        if: ${{ needs.determine-build-config.outputs.needs_build == 'true' }}
        uses: mikepenz/action-junit-report@5b7ee5a21e8674b695313d769f3cbdfd5d4d53a4 #v6.0.0
        with:
          report_paths: ${{ github.workspace }}/**/target/surefire-reports/*.xml
          require_passed_tests: true

      - name: Archive Reports
        uses: actions/upload-artifact@v5
        with:
          name: reports
          path: |
            **/target/reports/**

      - name: Archive Staging Repo
        uses: actions/upload-artifact@v5
        with:
          name: staging
          path: |
            ./*/staging-deploy/**
          retention-days: 10

  post_release:
    name: Post-Release
    runs-on: ubuntu-latest
    needs:
      - determine-build-config
      - release
    if: |
      always() && !cancelled() && (needs.detect-recent-changes.outputs.needs_release == 'true') && (needs.detect-recent-changes.outputs.dry_run == 'false')
    steps:
      - name: Notify Docker Repository
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
            -H "Authorization: Bearer ${{ secrets.DOCKER_ACTION_DISPATCH_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -d '{"ref":"main","inputs":{"version": "${{ needs.build.outputs.version}}","snapshot": "true"}}' \
            https://api.github.com/repos/operaton/operaton-docker/actions/workflows/build-test-and-publish.yml/dispatches)
          if [ "$response" -ne 204 ]; then
            echo "Failed to notify Docker repository. HTTP response code: $response"
            exit 1
          fi
